name: Go Build
on:
  workflow_call:
    inputs:
      artifact:
        description: "Enable or disable artifact generation."
        type: boolean
        required: false
        default: true
      artifact-pattern:
        description: "Pattern used to generate names for artifacts. {0} will be replaced by the target OS, {1} will be replaced by the target architecture."
        type: string
        required: false
        default: "${{ github.event.repository.name }}-{0}_{1}"
      packages:
        description: "A comma-separated list of packages to be built."
        type: string
        required: false
        default: "."
      platforms:
        description: "A comma-separated list of platforms for which to build the image."
        type: string
        required: false
        default: "linux/amd64"
      enable-cgo:
        description: "Whether to use CGO or not."
        type: boolean
        required: false
        default: false
      tags:
        description: "A list of build tags passed to go build."
        type: string
        required: false
        default: ""
      flags:
        description: "Additional flags passed to the go binary."
        type: string
        required: false
        default: ""
      ldflags:
        description: "Additional flags passed to the go linker."
        type: string
        required: false
        default: ""
      build-dir:
        description: "The name of the directory in which to store build artifacts."
        type: string
        required: false
        default: "build"

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.json }}
      packages: ${{ steps.packages.outputs.json }}
    steps:
      - name: Prepare Platforms
        id: platforms
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          echo "$PLATFORMS" | jq --raw-input --compact-output 'split(",") | map(gsub("^\\s+|\\s+$";""))' >> "$GITHUB_OUTPUT"
        env:
          PLATFORMS: ${{ inputs.platforms }}
      - name: Prepare Packages
        id: packages
        run: |
          echo -n "json=" >> "$GITHUB_OUTPUT"
          echo "$PACKAGES" | jq --raw-input --compact-output 'split(",") | map(gsub("^\\s+|\\s+$";""))' >> "$GITHUB_OUTPUT"
        env:
          PACKAGES: ${{ inputs.packages }}

  build:
    name: Build for ${{ matrix.platform }}
    needs: [ prepare ]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.prepare.outputs.platforms) }}
        package: ${{ fromJSON(needs.prepare.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Prepare Build
        id: vars
        run: |
          echo "os=${PLATFORM%%/*}" >> "$GITHUB_OUTPUT"
          echo "arch=${PLATFORM#*/}" >> "$GITHUB_OUTPUT"
          echo -n "package-name=" >> "$GITHUB_OUTPUT"

          pkg_id=$(echo "$PACKAGE" | cut -d " " -f1)
          if [[ "$pkg_id" == "." ]]; then
            basename "$PWD" >> $GITHUB_OUTPUT
          elif [[ "$pkg_id" == *"/..." ]]; then
            echo "Packages" >> "$GITHUB_OUTPUT"
          else
            basename "$pkg_id" >> $GITHUB_OUTPUT
          fi
        env:
          PLATFORM: ${{ matrix.platform }}
          PACKAGE: ${{ matrix.package }}
      - name: Setup Go
        uses: magnetikonline/action-golang-cache@v4
        with:
          go-version-file: go.mod
          cache-key-suffix: ${{ matrix.platform }}
      - name: Fetch Dependencies
        run: go mod download
      - name: Build ${{ steps.vars.outputs.package-name }}
        run: |
          if [[ "${{ inputs.artifact }}" == "true" ]]; then
            go build --tags="$TAGS" -ldflags "$LDFLAGS" -o "$BUILD_DIR/$PLATFORM/" -v $PACKAGE
          else
            go build --tags="$TAGS" -ldflags "$LDFLAGS" -v $PACKAGE
          fi
        env:
          BUILD_DIR: ${{ inputs.build-dir }}
          PLATFORM: ${{ matrix.platform }}
          PACKAGE: ${{ matrix.package }}
          TAGS: ${{ inputs.tags }}
          GOFLAGS: ${{ inputs.flags }}
          LDFLAGS: ${{ inputs.ldflags }}
          GOOS: ${{ steps.vars.outputs.os }}
          GOARCH: ${{ steps.vars.outputs.arch }}
          CGO_ENABLED: ${{ inputs.enable-cgo && '1' || '0' }}
      - name: Upload Binary
        if: ${{ inputs.artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format(inputs.artifact-pattern, steps.vars.outputs.os, steps.vars.outputs.arch) }}
          path: ${{ inputs.build-dir }}/*
          if-no-files-found: error
          retention-days: 1
